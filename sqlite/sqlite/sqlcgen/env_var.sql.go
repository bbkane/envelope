// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: env_var.sql

package sqlcgen

import (
	"context"
)

const varCreate = `-- name: VarCreate :exec
INSERT INTO env_var(
    env_id, name, comment, create_time, update_time, value
) VALUES (
    ?     , ?   , ?      , ?          , ?          , ?
)
`

type VarCreateParams struct {
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	Value      string
}

func (q *Queries) VarCreate(ctx context.Context, arg VarCreateParams) error {
	_, err := q.db.ExecContext(ctx, varCreate,
		arg.EnvID,
		arg.Name,
		arg.Comment,
		arg.CreateTime,
		arg.UpdateTime,
		arg.Value,
	)
	return err
}

const varDelete = `-- name: VarDelete :exec
DELETE FROM env_var WHERE env_id = ? AND name = ?
`

type VarDeleteParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) VarDelete(ctx context.Context, arg VarDeleteParams) error {
	_, err := q.db.ExecContext(ctx, varDelete, arg.EnvID, arg.Name)
	return err
}

const varFindByID = `-- name: VarFindByID :one
SELECT env.name AS env_name, env_var.env_var_id, env_var.env_id, env_var.name, env_var.comment, env_var.create_time, env_var.update_time, env_var.value
FROM env_var
JOIN env ON env_var.env_id = env.env_id
WHERE env_var.env_var_id = ?
`

type VarFindByIDRow struct {
	EnvName    string
	EnvVarID   int64
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	Value      string
}

func (q *Queries) VarFindByID(ctx context.Context, envVarID int64) (VarFindByIDRow, error) {
	row := q.db.QueryRowContext(ctx, varFindByID, envVarID)
	var i VarFindByIDRow
	err := row.Scan(
		&i.EnvName,
		&i.EnvVarID,
		&i.EnvID,
		&i.Name,
		&i.Comment,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Value,
	)
	return i, err
}

const varFindID = `-- name: VarFindID :one
SELECT env_var_id FROM env_var WHERE env_id = ? AND name = ?
`

type VarFindIDParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) VarFindID(ctx context.Context, arg VarFindIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, varFindID, arg.EnvID, arg.Name)
	var env_var_id int64
	err := row.Scan(&env_var_id)
	return env_var_id, err
}

const varList = `-- name: VarList :many
SELECT env_var_id, env_id, name, comment, create_time, update_time, value FROM env_var
WHERE env_id = ?
ORDER BY name ASC
`

func (q *Queries) VarList(ctx context.Context, envID int64) ([]EnvVar, error) {
	rows, err := q.db.QueryContext(ctx, varList, envID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvVar
	for rows.Next() {
		var i EnvVar
		if err := rows.Scan(
			&i.EnvVarID,
			&i.EnvID,
			&i.Name,
			&i.Comment,
			&i.CreateTime,
			&i.UpdateTime,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const varShow = `-- name: VarShow :one
SELECT env_var_id, env_id, name, comment, create_time, update_time, value
FROM env_var
WHERE env_id = ? AND name = ?
`

type VarShowParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) VarShow(ctx context.Context, arg VarShowParams) (EnvVar, error) {
	row := q.db.QueryRowContext(ctx, varShow, arg.EnvID, arg.Name)
	var i EnvVar
	err := row.Scan(
		&i.EnvVarID,
		&i.EnvID,
		&i.Name,
		&i.Comment,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Value,
	)
	return i, err
}

const varUpdate = `-- name: VarUpdate :exec
UPDATE env_var SET
    env_id = COALESCE(?1, env_id),
    name = COALESCE(?2, name),
    comment = COALESCE(?3, comment),
    create_time = COALESCE(?4, create_time),
    update_time = COALESCE(?5, update_time),
    value = COALESCE(?6, value)
WHERE env_var_id = ?7
`

type VarUpdateParams struct {
	EnvID      *int64
	Name       *string
	Comment    *string
	CreateTime *string
	UpdateTime *string
	Value      *string
	EnvVarID   int64
}

func (q *Queries) VarUpdate(ctx context.Context, arg VarUpdateParams) error {
	_, err := q.db.ExecContext(ctx, varUpdate,
		arg.EnvID,
		arg.Name,
		arg.Comment,
		arg.CreateTime,
		arg.UpdateTime,
		arg.Value,
		arg.EnvVarID,
	)
	return err
}
