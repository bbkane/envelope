// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: env_var_ref.sql

package sqlcgen

import (
	"context"
)

const envRefCreate = `-- name: EnvRefCreate :exec
INSERT INTO env_ref(
    env_id, name, comment, create_time, update_time, env_var_id
) VALUES (
    ?     , ?   , ?      , ?          , ?          , ?
)
`

type EnvRefCreateParams struct {
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	EnvVarID   int64
}

func (q *Queries) EnvRefCreate(ctx context.Context, arg EnvRefCreateParams) error {
	_, err := q.db.ExecContext(ctx, envRefCreate,
		arg.EnvID,
		arg.Name,
		arg.Comment,
		arg.CreateTime,
		arg.UpdateTime,
		arg.EnvVarID,
	)
	return err
}

const envRefDelete = `-- name: EnvRefDelete :exec
DELETE FROM env_ref WHERE env_id = ? AND name = ?
`

type EnvRefDeleteParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) EnvRefDelete(ctx context.Context, arg EnvRefDeleteParams) error {
	_, err := q.db.ExecContext(ctx, envRefDelete, arg.EnvID, arg.Name)
	return err
}

const envRefList = `-- name: EnvRefList :many
SELECT env_ref_id, env_id, name, comment, create_time, update_time, env_var_id FROM env_ref
WHERE env_id = ?
ORDER BY name ASC
`

func (q *Queries) EnvRefList(ctx context.Context, envID int64) ([]EnvRef, error) {
	rows, err := q.db.QueryContext(ctx, envRefList, envID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvRef
	for rows.Next() {
		var i EnvRef
		if err := rows.Scan(
			&i.EnvRefID,
			&i.EnvID,
			&i.Name,
			&i.Comment,
			&i.CreateTime,
			&i.UpdateTime,
			&i.EnvVarID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const envRefListByEnvVarID = `-- name: EnvRefListByEnvVarID :many
SELECT env.name AS env_name, env_ref.env_ref_id, env_ref.env_id, env_ref.name, env_ref.comment, env_ref.create_time, env_ref.update_time, env_ref.env_var_id FROM env_ref
JOIN env ON env_ref.env_id = env.env_id
WHERE env_var_id = ?
ORDER BY env_ref.name ASC
`

type EnvRefListByEnvVarIDRow struct {
	EnvName    string
	EnvRefID   int64
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	EnvVarID   int64
}

func (q *Queries) EnvRefListByEnvVarID(ctx context.Context, envVarID int64) ([]EnvRefListByEnvVarIDRow, error) {
	rows, err := q.db.QueryContext(ctx, envRefListByEnvVarID, envVarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvRefListByEnvVarIDRow
	for rows.Next() {
		var i EnvRefListByEnvVarIDRow
		if err := rows.Scan(
			&i.EnvName,
			&i.EnvRefID,
			&i.EnvID,
			&i.Name,
			&i.Comment,
			&i.CreateTime,
			&i.UpdateTime,
			&i.EnvVarID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const envRefShow = `-- name: EnvRefShow :one
SELECT env_ref_id, env_id, name, comment, create_time, update_time, env_var_id
FROM env_ref
WHERE env_id = ? AND name = ?
`

type EnvRefShowParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) EnvRefShow(ctx context.Context, arg EnvRefShowParams) (EnvRef, error) {
	row := q.db.QueryRowContext(ctx, envRefShow, arg.EnvID, arg.Name)
	var i EnvRef
	err := row.Scan(
		&i.EnvRefID,
		&i.EnvID,
		&i.Name,
		&i.Comment,
		&i.CreateTime,
		&i.UpdateTime,
		&i.EnvVarID,
	)
	return i, err
}
