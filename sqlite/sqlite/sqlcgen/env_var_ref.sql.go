// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: env_var_ref.sql

package sqlcgen

import (
	"context"
)

const varRefCreate = `-- name: VarRefCreate :exec
INSERT INTO env_ref(
    env_id, name, comment, create_time, update_time, env_var_id
) VALUES (
    ?     , ?   , ?      , ?          , ?          , ?
)
`

type VarRefCreateParams struct {
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	EnvVarID   int64
}

func (q *Queries) VarRefCreate(ctx context.Context, arg VarRefCreateParams) error {
	_, err := q.db.ExecContext(ctx, varRefCreate,
		arg.EnvID,
		arg.Name,
		arg.Comment,
		arg.CreateTime,
		arg.UpdateTime,
		arg.EnvVarID,
	)
	return err
}

const varRefDelete = `-- name: VarRefDelete :exec
DELETE FROM env_ref WHERE env_id = ? AND name = ?
`

type VarRefDeleteParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) VarRefDelete(ctx context.Context, arg VarRefDeleteParams) error {
	_, err := q.db.ExecContext(ctx, varRefDelete, arg.EnvID, arg.Name)
	return err
}

const varRefList = `-- name: VarRefList :many
SELECT env_ref_id, env_id, name, comment, create_time, update_time, env_var_id FROM env_ref
WHERE env_id = ?
ORDER BY name ASC
`

func (q *Queries) VarRefList(ctx context.Context, envID int64) ([]EnvRef, error) {
	rows, err := q.db.QueryContext(ctx, varRefList, envID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvRef
	for rows.Next() {
		var i EnvRef
		if err := rows.Scan(
			&i.EnvRefID,
			&i.EnvID,
			&i.Name,
			&i.Comment,
			&i.CreateTime,
			&i.UpdateTime,
			&i.EnvVarID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const varRefListByVarID = `-- name: VarRefListByVarID :many
SELECT env.name AS env_name, env_ref.env_ref_id, env_ref.env_id, env_ref.name, env_ref.comment, env_ref.create_time, env_ref.update_time, env_ref.env_var_id FROM env_ref
JOIN env ON env_ref.env_id = env.env_id
WHERE env_var_id = ?
ORDER BY env_ref.name ASC
`

type VarRefListByVarIDRow struct {
	EnvName    string
	EnvRefID   int64
	EnvID      int64
	Name       string
	Comment    string
	CreateTime string
	UpdateTime string
	EnvVarID   int64
}

func (q *Queries) VarRefListByVarID(ctx context.Context, envVarID int64) ([]VarRefListByVarIDRow, error) {
	rows, err := q.db.QueryContext(ctx, varRefListByVarID, envVarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VarRefListByVarIDRow
	for rows.Next() {
		var i VarRefListByVarIDRow
		if err := rows.Scan(
			&i.EnvName,
			&i.EnvRefID,
			&i.EnvID,
			&i.Name,
			&i.Comment,
			&i.CreateTime,
			&i.UpdateTime,
			&i.EnvVarID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const varRefShow = `-- name: VarRefShow :one
SELECT env_ref_id, env_id, name, comment, create_time, update_time, env_var_id
FROM env_ref
WHERE env_id = ? AND name = ?
`

type VarRefShowParams struct {
	EnvID int64
	Name  string
}

func (q *Queries) VarRefShow(ctx context.Context, arg VarRefShowParams) (EnvRef, error) {
	row := q.db.QueryRowContext(ctx, varRefShow, arg.EnvID, arg.Name)
	var i EnvRef
	err := row.Scan(
		&i.EnvRefID,
		&i.EnvID,
		&i.Name,
		&i.Comment,
		&i.CreateTime,
		&i.UpdateTime,
		&i.EnvVarID,
	)
	return i, err
}
